#!/usr/bin/env python

"""Combine the answers produced by various Q&A systems, indexed by question text.
"""
import argparse

import pandas

QUESTION_TEXT = "QuestionText"
RESPONSE_MARKUP = "responseMarkup"
ID = "id"
ANSWER_ID = "AnswerID"
TOP_ANSWER_TEXT = "TopAnswerText"
TOP_ANSWER_CONFIDENCE = "TopAnswerConfidence"
QUESTION = "Question"
NLC_TOP_CLASS = "NLC_TOP_CLASS"
NLC_CONF = "NLC_CONF"
CONFIDENCE = "Confidence"


def combine_systems(wea, nlc, corpus):
    # Drop duplicate questions. Assume the same question always generates the same answer.
    wea.drop_duplicates(QUESTION_TEXT, inplace=True)
    nlc.drop_duplicates(QUESTION_TEXT, inplace=True)

    # Use the corpus as a map from answer text to answer id.
    retain_only(corpus, [ID, RESPONSE_MARKUP])
    corpus.rename(columns={ID: ANSWER_ID}, inplace=True)

    # Replace the WEA answer text with its corresponding answer id. Only retain the answer id and confidence.
    retain_only(wea, [QUESTION_TEXT, TOP_ANSWER_TEXT, TOP_ANSWER_CONFIDENCE])
    wea = pandas.merge(left=wea, right=corpus, left_on=TOP_ANSWER_TEXT, right_on=RESPONSE_MARKUP, how="outer")
    wea.drop([RESPONSE_MARKUP, TOP_ANSWER_TEXT], inplace=True, axis=1)

    wea.rename(columns={QUESTION_TEXT: QUESTION, TOP_ANSWER_CONFIDENCE: CONFIDENCE}, inplace=True)
    # Only retain NLC answer and confidence.
    retain_only(nlc, [QUESTION_TEXT, NLC_TOP_CLASS, NLC_CONF])
    nlc.rename(columns={QUESTION_TEXT: QUESTION, NLC_TOP_CLASS: ANSWER_ID, NLC_CONF: CONFIDENCE},
               inplace=True)
    s = pandas.merge(left=wea, right=nlc, on=QUESTION, how="outer", suffixes=("_wea", "_nlc"))

    # Rearrange columns.
    s = s[[QUESTION, ANSWER_ID + "_wea", CONFIDENCE + "_wea", ANSWER_ID + "_nlc", CONFIDENCE + "_nlc"]]
    return s


def retain_only(data_frame, keep):
    remove = [c for c in data_frame.columns.tolist() if c not in keep]
    data_frame.drop(remove, inplace=True, axis=1)


def data_frame_csv(filename):
    return pandas.DataFrame.from_csv(filename, index_col=False)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("wea", type=data_frame_csv, help="QuestionsData.csv from the WEA logs")
    parser.add_argument("nlc", type=data_frame_csv, help="results from NLC")
    parser.add_argument("corpus", type=data_frame_csv, help="corpus as generated by get_paus.py")
    args = parser.parse_args()

    s = combine_systems(args.wea, args.nlc, args.corpus)
    print(s.to_csv(encoding="utf-8", index=False))
