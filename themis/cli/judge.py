"""
Judge answers using Annotate Assist

qa
    Generate question and answer pairs for Annotation Assist to judge. This takes question list filter, system answers,
    optional previous annotations.

corpus
    Create the corpus file used by Annotation Assist.

interpret
    Apply judgement threshold to file retrieved from Annotation Assist.
"""
from themis import CsvFileType, QUESTION, print_csv
from themis.annotate import AnnotationAssistFileType, create_annotation_assist_corpus, annotation_assist_qa_input, \
    mark_annotation_assist_correct


def judge_command(subparsers):
    parser = subparsers.add_parser("judge", help="judge answers provided by Q&A systems")
    subparsers = parser.add_subparsers(title="judge", description="generate and analyze judgments",
                                       help="Judgment actions")
    # Annotation Assistant Q&A pairs.
    judge_qa = subparsers.add_parser("qa",
                                     help="generate questions and answer pairs for judgment by Annotation Assistant")
    judge_qa.add_argument("answers", type=CsvFileType(), nargs="+",
                          help="answers generated by one of the 'qa' commands")
    judge_qa.add_argument("--questions", type=CsvFileType([QUESTION]), help="limit Q&A pairs to just these questions")
    judge_qa.add_argument("--judgments", type=CsvFileType(), nargs="+",
                          help="Q&A pair judgments generated by the 'judge interpret' command")
    judge_qa.set_defaults(func=qa_handler)
    # Annotation Assistant corpus.
    judge_corpus = subparsers.add_parser("corpus", help="generate corpus file for Annotation Assistant")
    judge_corpus.add_argument("corpus", type=CsvFileType(), help="corpus file created by the 'xmgr corpus' command")
    judge_corpus.set_defaults(func=corpus_handler)
    # Interpret Annotation Assistant judgments.
    judge_interpret = subparsers.add_parser("interpret", help="interpret Annotation Assistant judgments")
    judge_interpret.add_argument("judgments", type=AnnotationAssistFileType(),
                                 help="judgments file downloaded from Annotation Assistant")
    judge_interpret.add_argument("--judgment-threshold", type=float, default=50,
                                 help="cutoff value for a correct score, default 50")
    judge_interpret.set_defaults(func=interpret_handler)


def qa_handler(args):
    qa_pairs = annotation_assist_qa_input(args.answers, args.questions, args.judgments)
    print_csv(qa_pairs)


def corpus_handler(args):
    print(create_annotation_assist_corpus(args.corpus))


def interpret_handler(args):
    judgments = mark_annotation_assist_correct(args.judgments, args.judgment_threshold)
    print_csv(judgments)
