#!/usr/bin/env python

"""Comparison of the results of multiple systems' answers to the same question set.
This print the number of answers that are the same for each pair of system results
and a histogram of the number of different answers per question (i.e. 1 different
answer means all systems agreed and so forth).
"""
import argparse
import itertools
import os

import pandas


def compare_qa_systems(results):
    for (name_a, data_a), (name_b, data_b) in itertools.combinations(results, 2):
        suffix_a, suffix_b = ["_%s" % name for name in [name_a, name_b]]
        m = pandas.merge(data_a, data_b, left_index=True, right_index=True, suffixes=(suffix_a, suffix_b)).dropna()
        s = sum(m["AnswerId" + suffix_a] == m["AnswerId" + suffix_b])
        yield name_a, name_b, s, len(m)


def unique_answer_histogram(results):
    m = pandas.concat([r[["AnswerId"]] for r in results]).drop_duplicates()
    answer_id_counts = m.groupby(m.index).count()
    return pandas.DataFrame(data=answer_id_counts["AnswerId"].value_counts(), columns=["Count"])


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("results", type=argparse.FileType(), nargs="+",
                        help="Results file generated by answer_questions.py")
    args = parser.parse_args()
    results = [(os.path.basename(result.name), pandas.read_csv(result, encoding="utf-8").set_index("Question")) for
               result in args.results]
    for name_a, name_b, s, n in compare_qa_systems(results):
        print("%s %s %d of %d the same (%04f)" % (name_a, name_b, s, n, s / float(n)))
    print("\nDifferent answers per question histogram")
    print(unique_answer_histogram([r[1] for r in results]))
