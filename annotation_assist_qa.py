#!/usr/bin/env python

"""Convert the question and answer files to the Annotation Assist format."""

import argparse
import logging

import pandas

logger = logging.getLogger(__name__)

RESPONSE_MARKUP = "responseMarkup"
ID = "id"
ANSWER = "Answer"
ANSWER_ID = "AnswerId"
QUESTION = "Question"
CONFIDENCE = "Confidence"
DATE_TIME = "DateTime"
QUESTION_TEXT = "QuestionText"
TOP_ANSWER_TEXT = "TopAnswerText"
TOP_ANSWER_CONFIDENCE = "TopAnswerConfidence"


def convert_corpus(corpus_file, n):
    corpus = pandas.read_csv(corpus_file, encoding="utf-8", nrows=n)
    corpus.rename(columns={"id": "pauId", "responseMarkup": "text", "sourceName": "fileName"}, inplace=True)
    corpus["splitPauTitle"] = corpus["title"].apply(lambda title: title.split(":"))
    corpus.drop(["answeredByPau", "normalizedScore", "sourceDocUrl", "score", "title"], axis="columns", inplace=True)
    return corpus.to_json(orient="records")


def convert_qa(corpus_file, system_files, sample):
    corpus = pandas.read_csv(corpus_file, encoding="utf-8")
    systems = [pandas.read_csv(system_file, encoding="utf-8") for system_file in system_files]
    # Get a mapping of answer Ids to answers from the corpus.
    corpus = corpus[[RESPONSE_MARKUP, ID]]
    corpus.rename(columns={RESPONSE_MARKUP: ANSWER, ID: ANSWER_ID}, inplace=True)
    systems = [pandas.merge(system, corpus, on=ANSWER_ID) for system in systems]
    # noinspection PyUnresolvedReferences
    systems = pandas.concat(systems).drop_duplicates()
    # Add a dummy date time because the Annotation Assist README says that this column is required.
    systems[DATE_TIME] = "06052015:061049:UTC"
    logger.info("%d total Q&A pairs" % len(systems))
    # Optionally sample all the unique Q&A pairs for a specified number of questions.
    if sample is not None:
        sampled_questions = systems[QUESTION].drop_duplicates().sample(n=sample)
        systems = systems[systems[QUESTION].isin(sampled_questions)]
        logger.info("%d sampled Q&A pairs" % len(systems))
    systems.rename(columns={QUESTION: QUESTION_TEXT, ANSWER: TOP_ANSWER_TEXT, CONFIDENCE: TOP_ANSWER_CONFIDENCE},
                   inplace=True)
    return systems[[DATE_TIME, QUESTION_TEXT, TOP_ANSWER_TEXT, TOP_ANSWER_CONFIDENCE]]


def configure_logger(level, format):
    logger.setLevel(level)
    h = logging.StreamHandler()
    h.setFormatter(logging.Formatter(format))
    logger.addHandler(h)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("corpus", type=argparse.FileType(), help="corpus file to convert")
    parser.add_argument("systems", type=argparse.FileType(), nargs="+",
                        help="Results file generated by answer_questions.py")
    parser.add_argument("--sample", type=int, help="number of Q&A pairs to sample")
    parser.add_argument('--log', type=str, default="ERROR", help="logging level")
    args = parser.parse_args()

    configure_logger(args.log.upper(), "%(asctime)-15s %(message)s")
    print(convert_qa(args.corpus, args.systems, args.sample).to_csv(index=False, encoding="utf-8"))
