#!/usr/bin/env python

"""Look up answer Ids matching the top answer text and add them to the WEA logs.
The mapping from answer text to answer Id is taken from the corpus file extracted by get_paus.py.
"""
import argparse
import logging

import pandas

logger = logging.getLogger(__name__)

QUESTION = "Question"
ANSWER = "Answer"
ANSWER_ID = "AnswerId"
CONFIDENCE = "Confidence"
# WEA Corpus headers
ID = "id"
RESPONSE_MARKUP = "responseMarkup"
# WEA log headers
QUESTION_TEXT = "QuestionText"
TOP_ANSWER_TEXT = "TopAnswerText"
TOP_ANSWER_CONFIDENCE = "TopAnswerConfidence"
USER_EXPERIENCE = "UserExperience"


def process_wea_logs(wea_log, corpus, fix_confidence):
    wea_log = pandas.merge(wea_log, corpus, on=ANSWER).dropna(subset=[QUESTION])
    if fix_confidence:
        # Some user experiences record the confidence on a 0-100 scale instead of 0-1.
        indexes = [wea_log[USER_EXPERIENCE].isnull(),
                   wea_log[USER_EXPERIENCE] == "Top Answer Shown With Link To Multiple Answers",
                   wea_log[USER_EXPERIENCE] == "Dialog Response"]
        for index in indexes:
            wea_log.loc[index, [CONFIDENCE]] = wea_log[index][CONFIDENCE].div(100.0)
    return wea_log[[QUESTION, ANSWER, ANSWER_ID, CONFIDENCE]]


class CsvFileType(object):
    def __init__(self, columns=None, rename=None):
        self.columns = columns
        self.rename = rename

    def __call__(self, filename):
        csv = pandas.read_csv(filename, usecols=self.columns, encoding="utf-8")
        if self.rename is not None:
            csv = csv.rename(columns=self.rename)
        return csv


def configure_logger(level, format):
    logger.setLevel(level)
    h = logging.StreamHandler()
    h.setFormatter(logging.Formatter(format))
    logger.addHandler(h)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("wea_log",
                        type=CsvFileType([QUESTION_TEXT, TOP_ANSWER_TEXT, TOP_ANSWER_CONFIDENCE, USER_EXPERIENCE],
                                         {QUESTION_TEXT: QUESTION, TOP_ANSWER_TEXT: ANSWER,
                                          TOP_ANSWER_CONFIDENCE: CONFIDENCE}),
                        help="QuestionsData.csv from the WEA logs")
    parser.add_argument("corpus",
                        type=CsvFileType([ID, RESPONSE_MARKUP],
                                         {ID: ANSWER_ID, RESPONSE_MARKUP: ANSWER}),
                        help="corpus as generated by get_paus.py")
    parser.add_argument("--fix-confidence", action="store_true", help="Fix different confidence scales")
    parser.add_argument("--n", type=int, help="load first N rows, default load all")
    parser.add_argument("--log", type=str, default="ERROR", help="logging level")
    args = parser.parse_args()

    configure_logger(args.log.upper(), "%(asctime)-15s %(message)s")
    wea_log = process_wea_logs(args.wea_log.head(args.n), args.corpus, args.fix_confidence)
    print(wea_log.to_csv(encoding="utf-8", index=False))
    logger.info("%d questions, %d questions with answer ids" % (len(wea_log), wea_log[ANSWER_ID].count()))
