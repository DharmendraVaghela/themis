#!/usr/bin/env python

"""Render HTML of all unique Q&A pairs generated by different systems."""
import argparse

import pandas

QUESTION = "Question"
CONFIDENCE = "Confidence"
JUDGEMENT = "Judgement"
RESPONSE_MARKUP = "responseMarkup"
ID = "id"
ANSWER_ID = "AnswerId"
ANSWER = "Answer"


def qa_pairs(corpus_file, system_files):
    # Create a list of unique question/answer pairs.
    systems = []
    for system_file in system_files:
        system = pandas.read_csv(system_file, encoding="utf-8")
        system.drop(CONFIDENCE, axis="columns", inplace=True)
        systems.append(system)
    pairs = pandas.concat(systems).drop_duplicates()
    # Get a mapping of answer Ids to answers from the corpus.
    corpus = pandas.read_csv(corpus_file, encoding="utf-8")
    corpus = corpus[[RESPONSE_MARKUP, ID]]
    corpus.rename(columns={RESPONSE_MARKUP: ANSWER, ID: ANSWER_ID}, inplace=True)
    pairs = pandas.merge(pairs, corpus, on=ANSWER_ID).sample(frac=1)
    # Create an HTML table of questions and answers.
    html = ""
    for _, question, __, answer in pairs.itertuples():
        html += "\n<tr><td>%s</td> <td>%s</td> </tr>" % (question, answer)
    return "<table border=1><th>Question</th><th>Answer</th>\n%s\n</table>" % html


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("corpus", type=argparse.FileType(), help="corpus mapping answer to answer Id")
    parser.add_argument("systems", type=argparse.FileType(), nargs="+",
                        help="Results file generated by answer_questions.py")
    args = parser.parse_args()

    html = qa_pairs(args.corpus, args.systems)
    print(html.encode("utf-8"))
